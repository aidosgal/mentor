package handler

import (
	"context"
	"fmt"
	"log/slog"
	"strconv"

	"github.com/aidosgal/mentor/internal/auth/data"
	"github.com/aidosgal/mentor/internal/auth/service"
	tele "gopkg.in/telebot.v4"
)

type Handler interface {
	HandleStart(c tele.Context) error
	HandleAbout(c tele.Context) error
	HandleWho(c tele.Context) error
	HandleMentor(c tele.Context) error
	HandleListMentor(c tele.Context, category string) error
	HandleHelp(c tele.Context) error
	HandleReview(c tele.Context) error
}

type handler struct {
	log     *slog.Logger
	service service.Service
}

func NewHandler(log *slog.Logger, service service.Service) Handler {
	return &handler{
		log:     log,
		service: service,
	}
}

var (
	menu = &tele.ReplyMarkup{ResizeKeyboard: true}
	inlineMenu = &tele.ReplyMarkup{}

	BtnHelp   = menu.Text("–ü–æ–º–æ—â—å")
	BtnStart  = menu.Text("–ù–∞–π—Ç–∏ –ú–µ–Ω—Ç–æ—Ä–∞")
	BtnReview = menu.Text("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –º–µ–Ω—Ç–æ—Ä—É")
	
    BtnAbout = inlineMenu.Data("–ü—Ä–æ –Ω–∞—Å", "about_us")
    BtnWho = inlineMenu.Data("–ö–æ–º—É –ø–æ–¥—Ö–æ–¥–∏—Ç?", "for_who")
    BtnMentor = inlineMenu.Data("–°—Ç–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–æ–º", "become_mentor")
)

func (h *handler) HandleStart(c tele.Context) error {
	menu.Reply(
		menu.Row(BtnStart, BtnHelp),
		menu.Row(BtnReview),
	)
	
	inlineMenu.Inline(
        inlineMenu.Row(BtnAbout, BtnWho),
        inlineMenu.Row(BtnMentor),
    )
	
	userName := c.Message().Chat.Username
	log := h.log.With(
		"method", "HandleStart",
		"userName", userName,
	)
	firstName := c.Message().Chat.FirstNamen
	lastName := c.Message().Chat.LastName
	chatID := c.Message().Chat.ID

	userModel := &data.UserModel{
		FirstName: firstName,
		LastName:  lastName,
		UserName:  userName,
		ChatID:    strconv.Itoa(int(chatID)),
		Role:      "mentee",
	}

	ctx := context.Background()

	_, isNewUser, err := h.service.Create(ctx, userModel)
	if err != nil {
		log.Error("Failed to create user", "error", err)
		return err
	}

	var name string
	if firstName == "" || lastName == "" {
		name = fmt.Sprintf("%s%s", firstName, lastName)
	} else if firstName != "" && lastName != "" {
		name = fmt.Sprintf("%s %s", firstName, lastName)
	} else if firstName == "" && lastName == "" {
		name = userName
	}

	var welcomeText string
	if isNewUser {
		welcomeText = fmt.Sprintf("–°–∞–ª–∞–º–∞–ª–µ–π–∫—É–º, %s", name)
	} else {
		welcomeText = fmt.Sprintf("–°–∞–ª–∞–º–∞–ª–µ–π–∫—É–º, %s", name)
	}

	welcomeText = fmt.Sprintf(
        `–°–∞–ª–∞–º–∞–ª–µ–π–∫—É–º, %s! üëã

–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤–∞–º mitti ‚Äì –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞!

üöÄ –ú—ã ‚Äì –Ω–µ –ø—Ä–æ—Å—Ç–æ –±–æ—Ç, –∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Ç–Ω–µ—Ä –≤ –º–∏—Ä–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π

–ú—ã –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –≤–∞–º –¥–æ—Å—Ç–∏—á—å –Ω–æ–≤—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≤—ã—Å–æ—Ç!
        `,
        name,
    )

	heroImage := &tele.Photo{
		File: tele.FromDisk("./public/hero.png"),
		Caption: welcomeText,
	}

	err = c.Send(heroImage, inlineMenu, menu)
	if err != nil {
		return err
	}

	return nil
}

func (h *handler) HandleAbout(c tele.Context) error {
	return c.Send("–ú—ã –∫—Ä—É—Ç—ã–µ")
}

func (h *handler) HandleWho(c tele.Context) error {
	return c.Send("–í—Å–µ–º")
}

func (h *handler) HandleMentor(c tele.Context) error {
	return c.Send("–ê–≥–∞, —â–∞—Å")
}

func (h *handler) HandleListMentor(c tele.Context, category string) error {
	return c.Send("–∏—â–∏ —Å–∞–º")
}

func (h *handler) HandleHelp(c tele.Context) error {
	return c.Send("—Å–∞–º —Å–µ–±–µ –ø–æ–º–æ–≥–∏")
}

func (h *handler) HandleReview(c tele.Context) error {
	return c.Send("—Å—Ç—É–∫–∞—á —á—Ç–æ –ª–∏?")
}

